// TEMPLATE
// LINEAR SIEVE:

const int nn = 1e6;
int lp[nn+1];
vector<int> pr;
void sieve(){
	for (int i=2; i<=nn; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			pr.push_back (i);
		}
		for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=nn; ++j)
			lp[i * pr[j]] = pr[j];
	}
}

// bool prime sieve
vector<bool> prime(n+1, true);
prime[0] = false, prime[1] = false;
for(int i = 2; i*i <= n; i++){
	if(prime[i]){
		for(int j = i*i; j <= n; j+=i){
			prime[j] = false;
		}
	}
}

// factorize
map<long long,int> factorize(long long num){
    map<long long,int> factors;
    while(num % 2 == 0){
        factors[2]++;
        num >>= 1;
    }
    for(long long i = 3; i * i <= num; i+=2){
        while(num % i == 0){
            num /= i;
            factors[i]++;
        }
    }
    if(num != 1ll) factors[num]++;
    return factors;
}


// euclidean GCD
long long GCD(long long a, long long b){
	if(b == 0) return a;
	return GCD(b, a % b);
}

long long LCM(long long a, long long b){
	return (a / GCD(a, b)) * b;
}

// factmod
const int mod = 1e9;
int factmod(int n) {
    int p = mod;
    vector<int> f(p);
    f[0] = 1;
    for (int i = 1; i < p; i++)
        f[i] = f[i-1] * i % p;

    int res = 1;
    while (n > 1) {
        if ((n/p) % 2)
            res = p - res;
        res = res * f[n%p] % p;
        n /= p;
    }
    return res; 
}

// ncr
int nCr(int n, int r){
    if(r>n) return 0;
    return factmod(n) / (factmod(r)*factmod(n-r));
}
// npr
int nPr(int n, int r){
	if(r>n) return 0;
	return factmod(n) / factmod(n-r);
}
// ncr2
int nCr(int n, int r){
	if(r>n) return 0;
	long long ans = 1;
	for(int i = 1; i <= r; i++){
		ans *= n-i;
		ans /= i;
	}
	return ans;
}

// pow mod karatsuba
long long modpow(long long base, long long exp) {
	base %= MOD;
	long long result = 1;
	while (exp > 0) {
		if (exp & 1) result = (result * base) % MOD;
		base = (base * base) % MOD;
		exp >>= 1;
	}
	return result;
}

// HASH
struct custom_hash {
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        x ^= FIXED_RANDOM;
        return x ^ (x >> 16);
    }
};

// pair hash
struct pair_hash {
    template <class T1, class T2>
    std::size_t operator () (std::pair<T1, T2> const &pair) const {
        std::size_t h1 = std::hash<T1>()(pair.first);
        std::size_t h2 = std::hash<T2>()(pair.second);
        return h1 ^ h2;
    }
};

// union find, undo in kactl
struct UF {
    vector<int> e;
	UF(int n) : e(n, -1) {}
	bool sameSet(int a, int b) { return find(a) == find(b); }
	int size(int x) { return -e[find(x)]; }
	int find(int x) { return e[x] < 0 ? x : e[x] = find(e[x]); }
	bool join(int a, int b) {
		a = find(a), b = find(b);
		if (a == b) return false;
		if (e[a] > e[b]) swap(a, b);
		e[a] += e[b]; e[b] = a;
		return true;
	}
};


// fenwick tree/binary indexed tree [l, r]
struct FT {
    vector<long long> bit;
    int n;
    FT(int n) : bit(n, 0), n(n) {}
    long long sum(int r) {
        long long ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += bit[r];
        return ret;
    }
    long long sum(int l, int r) { return sum(r) - sum(l - 1); }
    void add(int idx, int delta) {
        for (; idx < n; idx = idx | (idx + 1))
            bit[idx] += delta;
    }
};


// 1 indexed
struct FT{
	vector<long long> bit;
	int n;
	FT(int n) : bit(n+1, 0), n(n) {}
	long long sum(int r){
		long long ret = 0;
		while(r > 0){
			ret += bit[r];
			r -= r & -r;
		}
		return ret;
	}
	
	long long sum(int l, int r){
		return sum(r) - sum(l);
	}
	
	void add(int i, int k){
		while(i < bit.size()){
			bit[i] += k;
			i += i & -i;
		}
	}
}


// segment tree (default max)
struct SegTree {
	typedef int T;
	static constexpr T unit = INT_MIN;
	T f(T a, T b) { return max(a, b); } // (any associative fn)
	vector<T> s; int n;
	SegTree(int n = 0, T def = unit) : s(2*n, def), n(n) {}
	void update(int pos, T val) {
		for (s[pos += n] = val; pos /= 2;)
			s[pos] = f(s[pos * 2], s[pos * 2 + 1]);
	}
	T query(int b, int e) { // query [b, e)
		T ra = unit, rb = unit;
		for (b += n, e += n; b < e; b /= 2, e /= 2) {
			if (b % 2) ra = f(ra, s[b++]);
			if (e % 2) rb = f(s[--e], rb);
		}
		return f(ra, rb);
	}
};

// lazy propagation segtree, range update range query
// Usage: Node* tr = new Node(v, 0, sz(v));

static char buf[450 << 20];
void* operator new(size_t s) {
	static size_t i = sizeof buf;
	assert(s < i);
	return (void*)&buf[i -= s];
}
void operator delete(void*) {}

const int inf = 1e9;
struct Node {
	Node *l = 0, *r = 0;
	int lo, hi, mset = inf, madd = 0, val = -inf;
	Node(int lo,int hi):lo(lo),hi(hi){} // Large interval of -inf
	Node(vi& v, int lo, int hi) : lo(lo), hi(hi) {
		if (lo + 1 < hi) {
			int mid = lo + (hi - lo)/2;
			l = new Node(v, lo, mid); r = new Node(v, mid, hi);
			val = max(l->val, r->val);
		}
		else val = v[lo];
	}
	int query(int L, int R) {
		if (R <= lo || hi <= L) return -inf;
		if (L <= lo && hi <= R) return val;
		push();
		return max(l->query(L, R), r->query(L, R));
	}
	void set(int L, int R, int x) {
		if (R <= lo || hi <= L) return;
		if (L <= lo && hi <= R) mset = val = x, madd = 0;
		else {
			push(), l->set(L, R, x), r->set(L, R, x);
			val = max(l->val, r->val);
		}
	}
	void add(int L, int R, int x) {
		if (R <= lo || hi <= L) return;
		if (L <= lo && hi <= R) {
			if (mset != inf) mset += x;
			else madd += x;
			val += x;
		}
		else {
			push(), l->add(L, R, x), r->add(L, R, x);
			val = max(l->val, r->val);
		}
	}
	void push() {
		if (!l) {
			int mid = lo + (hi - lo)/2;
			l = new Node(lo, mid); r = new Node(mid, hi);
		}
		if (mset != inf)
			l->set(lo,hi,mset), r->set(lo,hi,mset), mset = inf;
		else if (madd)
			l->add(lo,hi,madd), r->add(lo,hi,madd), madd = 0;
	}
};