// TEMPLATE
// LINEAR SIEVE:

const int nn = 1e6;
int lp[nn+1];
vector<int> pr;
void sieve(){
	for (int i=2; i<=nn; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			pr.push_back (i);
		}
		for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=nn; ++j)
			lp[i * pr[j]] = pr[j];
	}
}

// bool prime sieve
vector<bool> prime(n+1, true);
prime[0] = false, prime[1] = false;
for(int i = 2; i*i <= n; i++){
	if(prime[i]){
		for(int j = i*i; j <= n; j+=i){
			prime[j] = false;
		}
	}
}

// factorize
map<long long,int> factorize(long long num){
    map<long long,int> factors;
    while(num % 2 == 0){
        factors[2]++;
        num >>= 1;
    }
    for(long long i = 3; i * i <= num; i+=2){
        while(num % i == 0){
            num /= i;
            factors[i]++;
        }
    }
    if(num != 1ll) factors[num]++;
    return factors;
}


// euclidean GCD
long long GCD(long long a, long long b){
	if(b == 0) return a;
	return GCD(b, a % b);
}

long long LCM(long long a, long long b){
	return (a / GCD(a, b)) * b;
}

// factmod
const long long mod = 1e9 + 7;

long long factmod(long long n){
    if (n >= mod) return 0;
    long long result = 1;
    for (int i = 1; i <= n; i++){
        result = (result * i) % mod;
    }
    return result;
}

// ncr
int nCr(int n, int r){
    if(r>n) return 0;
    return factmod(n) / (factmod(r)*factmod(n-r));
}
// npr
int nPr(int n, int r){
	if(r>n) return 0;
	return factmod(n) / factmod(n-r);
}
// ncr2
int nCr(int n, int r){
	if(r>n) return 0;
	long long ans = 1;
	for(int i = 1; i <= r; i++){
		ans *= n-i;
		ans /= i;
	}
	return ans;
}

// pow mod karatsuba
long long modpow(long long base, long long exp) {
	base %= MOD;
	long long result = 1;
	while (exp > 0) {
		if (exp & 1) result = (result * base) % MOD;
		base = (base * base) % MOD;
		exp >>= 1;
	}
	return result;
}

// HASH
struct custom_hash {
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        x ^= FIXED_RANDOM;
        return x ^ (x >> 16);
    }
};

// pair hash
struct pair_hash {
    template <class T1, class T2>
    std::size_t operator () (std::pair<T1, T2> const &pair) const {
        std::size_t h1 = std::hash<T1>()(pair.first);
        std::size_t h2 = std::hash<T2>()(pair.second);
        return h1 ^ h2;
    }
};

// union find, undo in kactl
struct UF {
    vector<int> e;
	UF(int n) : e(n, -1) {}
	bool sameSet(int a, int b) { return find(a) == find(b); }
	int size(int x) { return -e[find(x)]; }
	int find(int x) { return e[x] < 0 ? x : e[x] = find(e[x]); }
	bool join(int a, int b) {
		a = find(a), b = find(b);
		if (a == b) return false;
		if (e[a] > e[b]) swap(a, b);
		e[a] += e[b]; e[b] = a;
		return true;
	}
};


// fenwick tree/binary indexed tree [l, r]
struct FT {
    vector<long long> bit;
    int n;
    FT(int n) : bit(n, 0), n(n) {}
    long long sum(int r) {
        long long ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += bit[r];
        return ret;
    }
    long long sum(int l, int r) { return sum(r) - sum(l - 1); }
    void add(int idx, int delta) {
        for (; idx < n; idx = idx | (idx + 1))
            bit[idx] += delta;
    }
};


// 1 indexed
struct FT{
	vector<long long> bit;
	int n;
	FT(int n) : bit(n+1, 0), n(n) {}
	long long sum(int r){
		long long ret = 0;
		while(r > 0){
			ret += bit[r];
			r -= r & -r;
		}
		return ret;
	}
	
	long long sum(int l, int r){
		return sum(r) - sum(l);
	}
	
	void add(int i, int k){
		while(i < (int)bit.size()){
			bit[i] += k;
			i += i & -i;
		}
	}
};


template<class T>
struct ConstSegTree {
    ConstSegTree() = delete;
    ConstSegTree(int N) : N(N), t(2 * N) {
    }
 
    T combine(T a, T b) {
        return __gcd(a,b);
    }
 
    void build(const vector<T>& arr) {  // build the tree
        n = arr.size();
        for (int i=0;i<n;i++) t[i+n] = arr[i];
        for (int i = n - 1; i > 0; --i) t[i] = combine(t[i*2], t[i*2+1]);
    }
 
    void modify(int p, T value) {  // set value at position p
        for (t[p += n] = value; p > 1; p /= 2) t[p/2] = combine(t[p], t[p^1]);
    }
 
    T query(int l, int r) {  // sum on interval [l, r)
        T res = 0;
        for (l += n, r += n; l < r; l /= 2, r /= 2) {
            if (l&1) res = combine(res, t[l++]);
            if (r&1) res = combine(res, t[--r]);
        }
        return res;
    }
 
    int N;
    vector<T> t;
    int n;
};