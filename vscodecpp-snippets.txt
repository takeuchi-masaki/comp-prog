{
	"ttemplate": {
		"prefix": "ttemplate",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"void solve(){",
			"\t$0",
			"",
			"}",
			"",
			"int main(){",
			"\tios::sync_with_stdio(false); cin.tie(nullptr);",
			"\tcin.exceptions(cin.failbit);",
			"\tint T = 1;",
			"\tcin >> T;",
			"\tfor(int i = 1; i <= T; i++) {",
			"\t\tsolve();",
			"\t}",
			"}"
		],
		"description": "c++ template"
	},

	"template": {
		"prefix": "template",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"void solve(){",
			"\t$0",
			"",
			"}",
			"",
			"int main(){",
			"\tios::sync_with_stdio(false); cin.tie(nullptr);",
			"\tcin.exceptions(cin.failbit);",
			"\tsolve();",
			"}"
		],
		"description": "c++ template"
	},
	
	"usaco training": {
		"prefix": "usaco",
		"body": [
			"/*",
			"ID: themasa1",
			"TASK: ${TM_FILENAME_BASE}",
			"LANG: C++14",
			"*/",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"",
			"int main() {",
			"    // freopen(\"${TM_FILENAME_BASE}.in\",\"r\",stdin); freopen(\"${TM_FILENAME_BASE}.out\",\"w\",stdout);",
			"\t$0",
			"\t",
			"    return 0;",
			"}"
		],
		"description": "usaco training template"
	},
	
	"freopen": {
		"prefix": "openfile",
		"body": [
			"freopen(\"in.txt\",\"r\",stdin); freopen(\"out.txt\",\"w\",stdout);"
		],
		"description": "use file input output"
	},

	"ll": {
		"prefix": "long long",
		"body": " long long",
		"description": "auto-complete long long"
	},

	"vector vector int": {
		"prefix": "vvi",
		"body": "vector<vector<int>> $1($2, vector<int>($3));",
		"description": "vector vector int"
	},

	"vector vector long long": {
		"prefix": "vvll",
		"body": "vector<vector<long long>> $1($2, vector<long long>($3));",
		"description": "vector vector long long"
	},

	"custom hash": {
		"prefix": "custom hash",
		"body": [
		  "struct custom_hash {",
		  "    size_t operator()(uint64_t x) const {",
		  "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
		  "        x ^= FIXED_RANDOM;",
		  "        return x ^ (x >> 16);",
		  "    }",
		  "};"
		],
		"description": "custom hash"
	},

	"vector int": {
		"prefix": "vi",
		"body": "vector<int>",
		"description": "vector int"
	},

	"popcount": {
		"prefix": "popcount",
		"body": "__builtin_popcount($0)",
		"description": "g++ builtin popcount shortcut"
	},

	"pair int int":{
		"prefix": "pii",
		"body": "pair<int, int>",
		"description": "pair int int"
	},

	"pair long long long long":{
		"prefix": "pll",
		"body": "pair<long long, long long>",
		"description": "pair long long"
	}
}